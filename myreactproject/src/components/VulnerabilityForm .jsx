import React, { useState } from 'react';
import { Form, Input, Button, DatePicker, Select, Row, Col, Slider, Typography, Flex, Tag, Tooltip, Radio  } from 'antd';
import { useForm } from 'antd/es/form/Form';
import { cwe, product, severity, vector, vendor_project, vulnerability_name } from '../constants';
import dayjs from 'dayjs';
import { useSendFormDataMutation } from '../baseApi';
import { InfoCircleOutlined } from '@ant-design/icons';

const { Title } = Typography;

const dateFormat = 'YYYY/MM/DD';

const VulnerabilityForm  = () => {
    const [form] = useForm();
    const [sendFormData] = useSendFormDataMutation();
    const [serverity, setSeverity] = useState(null)
    const [serverityColor, setSeverityColor] = useState('orange')

    const options = [
      {
        label: 'Rapidminer',
        value: 'rapidminer',
      },
      {
        label: 'Python',
        value: 'python',
      }
    ];

    const onValuesChange = async (changedValues, allValues) => {
      // if(!changedValues?.grp)
      //   return
      
      let values = { ...allValues };

      if (values.date_added) {
        const dateAdded = dayjs(allValues.date_added);
        values['date_added_day'] = dateAdded.date()
        values['date_added_month'] = dateAdded.month() + 1
        values['date_added_year'] = dateAdded.year()
        delete values.date_added
      }
      if (values.due_date) {
        const dateDuo = dayjs(allValues.due_date);
        values['due_date_day'] = dateDuo.date()
        values['due_date_month'] = dateDuo.month() + 1
        values['due_date_year'] = dateDuo.year()
        delete values.due_date
      }
      if (values.pub_date) {
        const datePub = dayjs(allValues.pub_date);
        values['pub_date_day'] = datePub.date()
        values['pub_date_month'] = datePub.month() + 1
        values['pub_date_year'] = datePub.year()
        delete values.pub_date
      }

      values['grp'] = parseInt(values['grp'])
      
      try {
        const response = await sendFormData(values).unwrap();
        const severity_value = severity.find(item => item.value === response?.prediction)
        setSeverity(severity_value.label)
        setSeverityColor(severity_value.color)
        console.log("Data sent successfully", response);
      } catch (error) {
        console.error("Failed to send data:", error);
      }

    };

    return (
      <>          
        <Form
          form={form}
          layout="vertical"
          // onFinish={onFinish}
          onValuesChange={onValuesChange}
          initialValues={{
            execution_type: 'python',
            vendor_project: 0,
            product: 71,
            vulnerability_name: 4,
            grp: 1,
            cvss: 9.8,
            cwe: 58,
            vector: 2,
            date_added: dayjs('2021/11/03', dateFormat),
            due_date: dayjs('2021/11/17', dateFormat),
            pub_date: dayjs('2021/02/16', dateFormat)          
        }}
      >
      <Row>
        <Col span={12}>
          <Form.Item
              name="execution_type"
              label=""
              rules={[{ required: true, message: '!' }]}
            >
              <Radio.Group options={options}/>
            </Form.Item>    
          <Row gutter={16}>
            <Col span={12}>        
              <Form.Item
                name="vendor_project"
                label="Vendor Project"
                rules={[{ required: true, message: 'Please input the vendor project!' }]}
              >
                <Select
                  showSearch
                  options={vendor_project}
                  optionFilterProp="label"
                  filterSort={(optionA, optionB) =>
                    (optionA?.label ?? '').toLowerCase().localeCompare((optionB?.label ?? '').toLowerCase())
                  }
              />
              </Form.Item>
            </Col>

            <Col span={12}>
              <Form.Item
                name="product"
                label="Product"
                rules={[{ required: true, message: 'Please input the product name!' }]}
              >
                <Select
                  showSearch
                  options={product}
                  optionFilterProp="label"
                  filterSort={(optionA, optionB) =>
                    (optionA?.label ?? '').toLowerCase().localeCompare((optionB?.label ?? '').toLowerCase())
                  }
              />
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="vulnerability_name"
                label="Vulnerability Name"
                rules={[{ required: true, message: 'Please input the vulnerability name!' }]}
              >
                <Select
                  showSearch
                  options={vulnerability_name}
                  optionFilterProp="label"
                  filterSort={(optionA, optionB) =>
                    (optionA?.label ?? '').toLowerCase().localeCompare((optionB?.label ?? '').toLowerCase())
                  }
              />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="grp"
                label="Grp"
                rules={[{ required: true, message: 'Please input the Grp!' }]}
              >
                <Input placeholder="Enter grp" type="number" min={1} max={10} />
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={16}>          
            <Col span={12}>
              <Form.Item
                name="cwe"
                label="CWE"
                rules={[{ required: true, message: 'Please input the CWE!' }]}
              >
                <Select
                  showSearch
                  options={cwe}
                  optionFilterProp="label"
                  filterSort={(optionA, optionB) =>
                    (optionA?.label ?? '').toLowerCase().localeCompare((optionB?.label ?? '').toLowerCase())
                  }
              />
              </Form.Item>
            </Col>

            <Col span={12}>
              <Form.Item
                name="vector"
                label="Vector"
                rules={[{ required: true, message: 'Please input the Vector!' }]}
              >
                <Select
                  showSearch
                  options={vector}
                  optionFilterProp="label"
                  filterSort={(optionA, optionB) =>
                    (optionA?.label ?? '').toLowerCase().localeCompare((optionB?.label ?? '').toLowerCase())
                  }
              />
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={16}>
            <Col span={8}>
              <Form.Item
                name="date_added"
                label="Date Added"
                rules={[{ required: true, message: 'Please select the date added!' }]}
              >
                <DatePicker style={{ width: '100%' }} format={dateFormat} allowClear={false} />
              </Form.Item>
            </Col>
            <Col span={8}>
              <Form.Item
                name="due_date"
                label="Due Date"
                rules={[{ required: true, message: 'Please select the due date!' }]}
              >
                <DatePicker style={{ width: '100%' }} format={dateFormat} allowClear={false}/>
              </Form.Item>
            </Col>
            <Col span={8}>
              <Form.Item
                name="pub_date"
                label="Pub Date"
                rules={[{ required: true, message: 'Please select the pub date!' }]}
              > 
                <DatePicker style={{ width: '100%' }} format={dateFormat} allowClear={false}/>
              </Form.Item>
            </Col>
          </Row>
          
          <Row gutter={16}>
            <Col span={24}>
              <Form.Item
                name="cvss"
                label="CVSS"
                rules={[{ required: true, message: 'Please select the cvss!' }]}
              >
                <Slider
                  min={0}
                  max={10}
                  tooltip={{
                    open: true,
                  }}
                  step={0.01}
                />
              </Form.Item>
            </Col>
          </Row>
          {/* <Form.Item>
            <Button type="primary" htmlType="submit" loading={true}>
              Submit
            </Button>
          </Form.Item> */}
        </Col>

        <Col span={12} style={{margin: 'auto'}}>
          <Flex justify={'center'} align={'center'}>
            <Title level={3} >Severity</Title>
          </Flex>
          <Flex justify={'center'}>
            <Tag color={serverityColor} style={{'fontSize': 'xxx-large', 'lineHeight': 'inherit'}}>{serverity}</Tag>            
          </Flex>
        </Col>
      </Row>
      </Form>

      </>
    );
};

export default VulnerabilityForm ;